.. _sec_tutorial:

========
Tutorial
========

.. _sec_tutorial_yaml_demography:

Defining a demography in YAML
-----------------------------

.. note::
   What is YAML? And why is it appropriate for this task?

A demographic model description contains enough information about
the demes (or populations) present, their attributes and relationships,
and general demographic features (e.g. rate of self-fertilization) to
be able to unambiguously recreate and simulate under that demograhy.
Thus, a ``demes`` model contains "global" attributes, `demes`, and
migration rates and mass migration events between demes.

A minimal YAML description of a demography requires the following:

#.  `description`: A description or identification of the demographic model.
#. `time_units`: The time units for any demographic events. (*Discussion of
   time measurement goes here?*
#. `demes`: a list of (at least one) deme, which must include information
   about its initial size.

For example, the simplest demography of a single population of constant
size (say, :math:`N_e=1000`) would be written as

.. literalinclude:: ./tutorial_examples/minimal.yml
   :language: yaml
   :caption: A minimal YAML demography.
   :name: minimal-demography

.. note::
   We need to discuss time conventions, and the  measurement and flow of time.

Since we did not specify a `start_time` or `end_time` of the deme's
existence, by defult it spans all time from :math:`\infty` to 0 (recall
that time is measured by `time_units` in the past, and 0 corresponds
to "now"). 

Defining epochs
^^^^^^^^^^^^^^^

A `deme` can be made to have more interesting demographic history, such as
size changes or non-constant size functions. This is done by defining
`epochs` that span the time that a deme exists. When defining an epoch,
we specify its `start_time` and `end_time`, along with its `initial_size`
and `final_size` (or just `initial_size` if the population size is constant
over that epoch).

For example, the same minimal demography :ref:`above <minimal-demography>`
could be written by specifying a single epoch for 

Multiple demes
^^^^^^^^^^^^^^

Population splits and branches
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Continuous migration
^^^^^^^^^^^^^^^^^^^^

Pulse migration events
^^^^^^^^^^^^^^^^^^^^^^

Admixture events
^^^^^^^^^^^^^^^^

.. note::
   **A note on model robustness and ambiguity**

   This is the note.



.. _sec_tutorial_python_api:

Using the Python API
--------------------

Working directly with the Python API.

.. _sec_tutorial_attributes:

Deme attributes
---------------

Additional features: selfing, cloning, migration rate changes, ...

